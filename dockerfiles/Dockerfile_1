# Description: Dockerfile example 1.
# Date: Thu. 2/8/24 @ 3:09 PM EST

# The parent image is an official Python runtime.
FROM python:3.8-alpine as base

# Set environment variables.
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Install required dependencies.
RUN apk update \
    && apk add --virtual build-deps gcc python3-dev musl-dev \
    && apk add postgresql-dev \
    && pip install --upgrade pip \
    && pip install psycopg2

# Set the working directory inside the container.
WORKDIR /usr/src/app

# Copy the contents of the current directory to the '/usr/src/app/' 
# directory inside the docker image.
COPY . /usr/src/app/

# Install any requisite libraries defined in 'requirements.txt'.
RUN pip install --no-cache-dir -r requirements.txt

# Multi-stage build: Start a new build stage from base image 'base'
# and name this stage 'final'.
#  - In multi-stage builds, multiple 'FROM' statments are allowed.
#  - Each 'FROM' statement can use a different base image and start
#    a new stage of the build.
#  - You are allowed to copy artifacts from one stage to another;
#    everything you don't want can be left behind and not included 
#    in the final image.
FROM base as final

# Create a group and user.
#  - 'addgroup -S app': Creates a new group named 'app'.
#  - 'adduser - S app -G app': Creates new user 'app' and adds it to
#    the group 'app'.
#  - '-S': Makes it a system user.
#  - '-G': Flag that specifies the group.
RUN addgroup -S app && adduser -S app -G app

# Tell docker that all future commands should run as the 'app' user.
# Any processes that are run will run as the 'app' user, not the 'root' user.
USER app

# Healthcheck!
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD [ "python", "./healthcheck.py" ]

# Run the application!
CMD ["python", "./app.py"]
